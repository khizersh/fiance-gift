{"version":3,"sources":["components/card-list/card/card.component.js","components/SearchBox/SearchBox.component.js","components/card-list/card-list-component.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","monster","id","src","key","name","email","SearchBox","type","placeholder","onChange","handleChange","CardList","state","monsters","searchField","fetch","then","response","json","data","setState","this","filteredMonster","filter","toLowerCase","includes","Fragment","event","target","value","map","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mUAaeA,G,MAVF,SAACC,GAEV,OACA,yBAAKC,UAAU,kBACf,yBAAMC,IAAKF,EAAMG,QAAQC,GAAIC,IAAG,+BAA0BL,EAAMG,QAAQC,GAAxC,4BAChC,wBAAIE,IAAKN,EAAMG,QAAQC,IAAMJ,EAAMG,QAAQI,KAA3C,KACA,wBAAID,IAAKN,EAAMG,QAAQC,IAAI,2CAA0BJ,EAAMG,QAAQK,MAAnE,QCGWC,G,MATG,SAAAT,GAEf,OACI,2BAAOU,KAAK,OACXC,YAAaX,EAAMW,YACnBC,SAAUZ,EAAMa,aACfZ,UAAU,aCHEa,G,iNACjBC,MAAQ,CACJC,SAAS,GACTC,YAAY,I,mFAII,IAAD,OACfC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACP,SAASM,S,+BAGjC,IAAD,SAC6BE,KAAKT,MAA/BC,EADH,EACGA,SAAUC,EADb,EACaA,YACXQ,EAAkBT,EAASU,QAAO,SAAAvB,GAAO,OAC5CA,EAAQI,KAAKoB,cAAcC,SAASX,EAAYU,kBAEnD,OACI,kBAAC,IAAME,SAAP,KAGA,kBAAC,EAAD,CACAlB,YAAY,iBACZE,aAAe,SAAAiB,GAAK,OAAI,EAAKP,SAAS,CAACN,YAAaa,EAAMC,OAAOC,WAGjE,yBAAK/B,UAAU,aAEZwB,EAAgBQ,KAAI,SAAA9B,GAChB,OAAO,kBAAC,EAAD,CAAMA,QAAWA,a,GA9BL+B,cCUvBC,MAVf,WACE,OACE,6BACA,8BAAM,wBAAIlC,UAAU,WAAd,mBAAN,KACC,uBAAGA,UAAU,iBAAb,qBACD,kBAAC,EAAD,QCCgBmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bb57bd87.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css'\r\n\r\nconst Card = (props) =>{\r\n\r\n    return(\r\n    <div className=\"card-container\">\r\n    <img  alt={props.monster.id} src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n    <h2 key={props.monster.id}>{ props.monster.name} </h2>\r\n    <h4 key={props.monster.id}><strong>email: </strong>{ props.monster.email} </h4>\r\n    </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react'\r\nimport './SearchBox.style.css'\r\n\r\nconst SearchBox = props =>{\r\n\r\n   return (\r\n       <input type=\"text\"\r\n        placeholder={props.placeholder}\r\n        onChange={props.handleChange}\r\n         className=\"search\" />\r\n       );\r\n}\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport Card from '../card-list/card/card.component';\r\nimport SearchBox from '../SearchBox/SearchBox.component';\r\nimport  './card-list.style.css';\r\n\r\n\r\nexport default class CardList extends Component{\r\n    state = {\r\n        monsters:[],\r\n        searchField:''\r\n    };\r\n   \r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => this.setState({monsters:data}))\r\n    }\r\n\r\n    render(){\r\n        const {monsters, searchField}  = this.state;\r\n        const filteredMonster = monsters.filter(monster => (\r\n           monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n        ));\r\n        return(\r\n            <React.Fragment>\r\n\r\n           \r\n            <SearchBox\r\n            placeholder=\"search monster\"\r\n            handleChange ={event => this.setState({searchField: event.target.value})} \r\n            />\r\n\r\n            <div className=\"card-list\">\r\n           {\r\n               filteredMonster.map(monster => {\r\n                   return <Card monster = {monster} />\r\n               })\r\n           }\r\n            </div>\r\n            </React.Fragment>\r\n        \r\n            \r\n        );\r\n    }\r\n}","import React from 'react';\nimport './app.css';\nimport CardList from './components/card-list/card-list-component';\n\n\n\nfunction App() {\n  return (\n    <div>\n    <span><h1 className=\"heading\">Monster Roledex</h1> </span>\n     <i className=\"heading-title\">Created by Khizer</i>\n    <CardList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}